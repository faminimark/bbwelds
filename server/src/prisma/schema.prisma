generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_WITH_SCHEMA")
}

model comments {
  comment_id   Int          @id @default(autoincrement())
  user_id      Int?
  comment      String?      @db.VarChar(250)
  post_id      Int?
  vote_id      Int?
  comment_type comment_type
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  posts        posts?       @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction)
  users        users?       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  votes        votes?       @relation(fields: [vote_id], references: [vote_id], onDelete: NoAction, onUpdate: NoAction)
}

model companies {
  company_id   Int        @id @default(autoincrement())
  company_name String?    @db.VarChar(50)
  description  String?    @db.VarChar(255)
  license_num  String?    @db.VarChar(80)
  created_at   DateTime?  @db.Date
  location_id  Int?
  locations    locations? @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction)
  users        users[]
}

model locations {
  location_id  Int         @id @default(autoincrement())
  address_1    String?     @db.VarChar(100)
  address_2    String?     @db.VarChar(100)
  city         String?     @db.VarChar(80)
  state_region String?     @db.VarChar(80)
  country      String?     @db.VarChar(80)
  zip_postal   String?     @db.VarChar(20)
  companies    companies[]
  users        users[]
}

model post_tags {
  post_tags_id Int    @id @default(autoincrement())
  post_id      Int?
  tag_id       Int?
  posts        posts? @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction)
  tags         tags?  @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction)
}

model posts {
  post_id     Int             @id @default(autoincrement())
  title       String?         @db.VarChar(50)
  description String?
  created_at  DateTime        @default(now()) @db.Timestamp(6)
  user_id     Int?
  category    category_types?
  comments    comments[]
  post_tags   post_tags[]
  users       users?          @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model tags {
  tag_id    Int         @id @default(autoincrement())
  name      String?     @db.VarChar(50)
  post_tags post_tags[]
}

model users {
  user_id             Int           @id @default(autoincrement())
  f_name              String?       @db.VarChar(50)
  l_name              String?       @db.VarChar(50)
  created_at          DateTime      @default(now()) @db.Timestamp(6)
  fullname            String?       @db.VarChar(120)
  profile_description String?
  location_id         Int?
  company_id          Int?
  auth                auth[]
  comments            comments[]
  contacts            contacts[]
  credentials         credentials[]
  posts               posts[]
  user_votes          user_votes[]
  companies           companies?    @relation(fields: [company_id], references: [company_id], onDelete: NoAction, onUpdate: NoAction)
  locations           locations?    @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction)
}

model votes {
  vote_id       Int          @id @default(autoincrement())
  upvote        Int?
  downvote      Int?
  voteable_id   Int
  voteable_type image_type?
  comments      comments[]
  user_votes    user_votes[]
}

model auth {
  auth_id    Int       @id @default(autoincrement())
  user_id    Int
  password   String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  last_login DateTime? @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@index([user_id], map: "idx_auth_user_id")
}

model credentials {
  credential_id String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String                @db.VarChar(255)
  description   String?
  created_at    DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?             @default(now()) @db.Timestamptz(6)
  user_id       Int?
  type          credential_type_enum?
  users         users?                @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model contacts {
  contact_id   String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      Int?
  contact_type contact_enum? @default(email)
  created_at   DateTime?     @default(now()) @db.Timestamptz(6)
  value        String?       @unique(map: "unique_contact_value") @db.VarChar(255)
  users        users?        @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model image_urls {
  image_id     Int          @id @default(autoincrement())
  image_url    String       @db.VarChar(500)
  status       status_enum? @default(active)
  image_type   image_type
  imageable_id Int
}

model user_votes {
  user_vote_id Int       @id @default(autoincrement())
  vote_type    vote_type
  vote_id      Int
  user_id      Int
  users        users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  votes        votes     @relation(fields: [vote_id], references: [vote_id], onDelete: NoAction, onUpdate: NoAction)
}

enum contact_enum {
  email
  phone
}

enum credential_type_enum {
  license
  certification
}

enum status_enum {
  active
  deleted
}

enum category_types {
  electrician
  automotive
  metal_workers @map("metal workers")
  hvac
  concrete
}

enum image_type {
  comment
  post
  user
}

enum vote_type {
  upvote
  downvote
}

enum comment_type {
  post
  comment
  reply
}
